name: Node.js CI

on:
  push:
    tags:
      - '*'
    branches:
      - '*'  

  pull_request:
    branches: 
      - '*'
    types: [opened, synchronize]
  release:
    types:
      - created

env:
  ESM_NAME: "openmrs-ohri-app"
  JS_NAME: "openmrs-ohri-app.js"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14.x"
      - run: npx lerna bootstrap
      - run: npx lerna run lint
      - run: npx lerna run typescript
      - run: npm run test
      - run: npx lerna run build
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: packages
          path: |
            packages/**/dist

  deploy:
    runs-on: ubuntu-latest

    needs: pre_release

    if: ${{ github.ref == 'refs/heads/dev' }} 

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
      - name: Compute Timestamp
        run: echo "TIMESTAMP=$(date +'%Y-%m-%d')" >> $GITHUB_ENV      
      - name: Prepare Directory
        shell: bash
        run: |
          mkdir -p dist/${{ env.ESM_NAME }}/${{ env.TIMESTAMP }}_${{ github.sha }}
          mv dist/*.* dist/${{ env.ESM_NAME }}/${{ env.TIMESTAMP }}_${{ github.sha }}/
          # Runs a set of commands using the runners shell
      - uses: garygrossgarten/github-action-ssh@release
        name: Run the Update MicroFronEnd Script
        with:
            command: cd /usr/share/tomcat/microfrontends/dev && /bin/bash update_microfrontends.sh
            host: ${{ secrets.HISTAC_HOST }}
            username: ${{ secrets.HISTAC_USERNAME }}
            privateKey: ${{ secrets.HISTAC_KEY}}

            port: ${{ secrets.HISTAC_PORT }} 

  pre_release:
    runs-on: ubuntu-latest

    needs: build
    
    if: ${{ github.event_name == 'push' }}
     
    steps:
      - uses: actions/checkout@v2
      - name: Download Artifacts
        uses: actions/download-artifact@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14.x"
          registry-url: "https://registry.npmjs.org"
      - run: npm install
      - run: sed -i -e "s/\(\"version\":\\s\+\"\([0-9]\+\.\?\)\+\)/\1-pre.${{ github.run_number }}/" 'package.json'
      - run: npm run build --if-present
      - run: npm publish --access public --tag next
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  pre_demo:
    runs-on: ubuntu-latest

    needs: build
    
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v2
      - name: Download Artifacts
        uses: actions/download-artifact@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14.x"
          registry-url: "https://registry.npmjs.org"
      - run: npm install
      - run: sed -i -e "s/\(\"version\":\\s\+\"\([0-9]\+\.\?\)\+\)/\1-pre.${{ github.run_number }}/" 'package.json'
      - run: npm publish --access public --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  working:
    runs-on: ubuntu-latest

    needs: pre_release 
    
    if: ${{ github.ref == 'refs/heads/working' }} 
    
    steps:
      # Update the Microfrontends to reflect what we have in the Working branch
      - uses: garygrossgarten/github-action-ssh@release
        name: Run the Update MicroFronEnd Script
        with:
            command: cd /usr/share/tomcat/microfrontends/working && sh update_microfrontends.sh
            host: ${{ secrets.HISTAC_HOST }}
            username: ${{ secrets.HISTAC_USERNAME }}
            privateKey: ${{ secrets.HISTAC_KEY}}
            port: ${{ secrets.HISTAC_PORT }}

  demo:
    runs-on: ubuntu-latest

    needs: pre_demo 
    
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      # Update the Microfrontends to reflect what we have in the Working branch
      - uses: garygrossgarten/github-action-ssh@release
        name: Run the Update MicroFronEnd Script
        with:
            command: cd /usr/share/tomcat/microfrontends/test && sh update_microfrontends.sh
            host: ${{ secrets.HISTAC_HOST }}
            username: ${{ secrets.HISTAC_USERNAME }}
            privateKey: ${{ secrets.HISTAC_KEY}}
            port: ${{ secrets.HISTAC_PORT }} 
  
  deploy_ohri_app:
      runs-on: ubuntu-latest

      env:
        DIR_NAME: "esm-ohri-app"
        ESM_NAME: "@openmrs/esm-ohri-app"
        JS_NAME: "openmrs-esm-ohri-app.js"

      needs: build

      if: ${{ github.event_name == 'push' }}

      steps:
        - name: Download Artifacts
          uses: actions/download-artifact@v2
        - name: Compute Timestamp
          run: echo "TIMESTAMP=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
        - name: Prepare Directory
          shell: bash
          run: |
            mkdir -p dist/${{ env.ESM_NAME }}/${{ env.TIMESTAMP }}_${{ github.sha }}
            mv packages/${{ env.DIR_NAME }}/dist/*.* dist/${{ env.ESM_NAME }}/${{ env.TIMESTAMP }}_${{ github.sha }}/
        - name: Publish to Digital Ocean
          uses: jakejarvis/s3-sync-action@master
          with:
            args: --acl public-read --follow-symlinks --cache-control "max-age=31536000"
          env:
            AWS_S3_BUCKET: ${{ secrets.DIGITAL_OCEAN_SPACES_BUCKET }}
            AWS_ACCESS_KEY_ID: ${{ secrets.DIGITAL_OCEAN_SPACES_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.DIGITAL_OCEAN_SPACES_ACCESS_KEY }}
            AWS_S3_ENDPOINT: ${{ secrets.DIGITAL_OCEAN_SPACES_ENDPOINT }}
            SOURCE_DIR: "dist"
        - name: Update Importmap
          uses: fjogeleit/http-request-action@master
          with:
            url: http://${{ secrets.DEPLOYER_HOST }}/services?env=prod
            method: "PATCH"
            username: ${{ secrets.DEPLOYER_USERNAME }}
            password: ${{ secrets.DEPLOYER_PASSWORD }}
            data: '{ "service":"${{ env.ESM_NAME }}","url":"https://spa-modules.nyc3.digitaloceanspaces.com/${{ env.ESM_NAME }}/${{ env.TIMESTAMP }}_${{ github.sha }}/${{ env.JS_NAME }}" }'
            customHeaders: '{ "Accept": "application/json", "Content-Type": "application/json" }'

  deploy_forms_app:
      runs-on: ubuntu-latest

      env:
        DIR_NAME: "esm-forms-app"
        ESM_NAME: "@openmrs/esm-forms-app"
        JS_NAME: "openmrs-esm-forms-app.js"

      needs: build

      if: ${{ github.event_name == 'push' }}

      steps:
        - name: Download Artifacts
          uses: actions/download-artifact@v2
        - name: Compute Timestamp
          run: echo "TIMESTAMP=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
        - name: Prepare Directory
          shell: bash
          run: |
            mkdir -p dist/${{ env.ESM_NAME }}/${{ env.TIMESTAMP }}_${{ github.sha }}
            mv packages/${{ env.DIR_NAME }}/dist/*.* dist/${{ env.ESM_NAME }}/${{ env.TIMESTAMP }}_${{ github.sha }}/
        - name: Publish to Digital Ocean
          uses: jakejarvis/s3-sync-action@master
          with:
            args: --acl public-read --follow-symlinks --cache-control "max-age=31536000"
          env:
            AWS_S3_BUCKET: ${{ secrets.DIGITAL_OCEAN_SPACES_BUCKET }}
            AWS_ACCESS_KEY_ID: ${{ secrets.DIGITAL_OCEAN_SPACES_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.DIGITAL_OCEAN_SPACES_ACCESS_KEY }}
            AWS_S3_ENDPOINT: ${{ secrets.DIGITAL_OCEAN_SPACES_ENDPOINT }}
            SOURCE_DIR: "dist"
        - name: Update Importmap
          uses: fjogeleit/http-request-action@master
          with:
            url: http://${{ secrets.DEPLOYER_HOST }}/services?env=prod
            method: "PATCH"
            username: ${{ secrets.DEPLOYER_USERNAME }}
            password: ${{ secrets.DEPLOYER_PASSWORD }}
            data: '{ "service":"${{ env.ESM_NAME }}","url":"https://spa-modules.nyc3.digitaloceanspaces.com/${{ env.ESM_NAME }}/${{ env.TIMESTAMP }}_${{ github.sha }}/${{ env.JS_NAME }}" }'
            customHeaders: '{ "Accept": "application/json", "Content-Type": "application/json" }'