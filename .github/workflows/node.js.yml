name: Node.js CI

on:
  push:
    tags:
      - '*'
    branches:
      - master
      - staging
      - demo
      - dev
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened, closed]
  release:
    types:
      - created

env:
  ESM_NAME: "openmrs-esm-ohri-form"
  JS_NAME: "openmrs-esm-ohri-form.js"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14.x"
      - run: npm install
      - run: npm run lint
#       - run: npm run coverage
#       - run: npm run typescript
      - run: npm run build --if-present
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: |
            dist

  deploy:
    runs-on: ubuntu-latest

    needs: build

    if: ${{ github.event_name == 'push' }}

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
      - name: Compute Timestamp
        run: echo "TIMESTAMP=$(date +'%Y-%m-%d')" >> $GITHUB_ENV      
      - name: Prepare Directory
        shell: bash
        run: |
          mkdir -p dist/${{ env.ESM_NAME }}/${{ env.TIMESTAMP }}_${{ github.sha }}
          mv dist/*.* dist/${{ env.ESM_NAME }}/${{ env.TIMESTAMP }}_${{ github.sha }}/
          # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          mkdir ../build
          cp -TR . ../build
          tar -cvf deploy_dev.tar ../build/
      - uses: appleboy/scp-action@v0.1.1
        name: SCP file via ssh password to Transfer Files Upload Artifacts to Dev Server
        with: 
          host: ${{ secrets.HISTAC_HOST }}
          username: ${{ secrets.HISTAC_USERNAME }}
          port: ${{ secrets.HISTAC_PORT }}
          key: ${{ secrets.HISTAC_KEY }}
          passphrase: ${{ secrets.HISTAC_PASSPHRASE }}
          proxy_port: ${{ secrets.HISTAC_PROXY_PORT }}
          source: "deploy_dev.tar"
          target: "/usr/share/tomcat/"
          debug: true  
      
      - uses: garygrossgarten/github-action-ssh@release
        name: Run the Update MicroFronEnd Script
        with:
            command: cd /usr/share/tomcat/microfrontends/dev && sh update_microfrontends.sh
            host: ${{ secrets.HISTAC_HOST }}
            username: ${{ secrets.HISTAC_USERNAME }}
            passphrase: ${{ secrets.HISTAC_PASSPHRASE }}
            privateKey: ${{ secrets.HISTAC_KEY}}
            port: ${{ secrets.HISTAC_PORT }}
            proxy_port: ${{ secrets.HISTAC_PROXY_PORT }}

  pre_release:
    runs-on: ubuntu-latest

    needs: deploy

    if: ${{ github.event_name == 'push' }}

    steps:
      - uses: actions/checkout@v2
      - name: Download Artifacts
        uses: actions/download-artifact@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14.x"
          registry-url: "https://registry.npmjs.org"
      - run: npm install
      - run: sed -i -e "s/\(\"version\":\\s\+\"\([0-9]\+\.\?\)\+\)/\1-pre.${{ github.run_number }}/" 'package.json'
      - run: npm run build --if-present
      - run: npm publish --access public --tag next
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  release:
    runs-on: ubuntu-latest

    needs: deploy

    steps:
      - uses: actions/checkout@v2
      - name: Download Artifacts
        uses: actions/download-artifact@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14.x"
          registry-url: 'https://registry.npmjs.org'
      - run: npm install
      - run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          mkdir ../build
          cp -TR . ../build
          tar -cvf deploy_dev.tar ../build/
      - uses: appleboy/scp-action@v0.1.1
        name: SCP file via ssh password to Transfer Files Upload Artifacts to DO
        with: 
          host: ${{ secrets.DIGITAL_OCEAN_HOST }}
          username: ${{ secrets.DIGITAL_OCEAN_USERNAME }}
          port: ${{ secrets.DIGITAL_OCEAN_PORT }}
          password: ${{ secrets.DIGITAL_OCEAN_PASSWORD }}
          # key: ${{ secrets.KEY }}
          source: "deploy_dev.tar"
          target: "dist_latest"
          debug: true

  test:
    runs-on: ubuntu-latest

    needs: deploy
    
    steps:
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          mkdir ../build
          cp -TR . ../build
          tar -cvf deploy_dev.tar ../build/
      - uses: appleboy/scp-action@v0.1.1
        name: SCP file via ssh password to Transfer Files Upload Artifacts to DO
        with: 
          host: ${{ secrets.HISTAC_HOST }}
          username: ${{ secrets.HISTAC_USERNAME }}
          port: ${{ secrets.HISTAC_PORT }}
#           password: ${{ secrets.HISTAC_PASSWORD }}
          key: ${{ secrets.HISTAC_KEY }}
          passphrase: ${{ secrets.HISTAC_PASSPHRASE }}
          proxy_port: ${{ secrets.HISTAC_PROXY_PORT }}
          source: "deploy_dev.tar"
          target: "dist_latest"
          debug: true     
